import os
import json
import hashlib
import markdown
from io import StringIO  # for capturing markdown output

css_styles = """
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

body {
  font-family: 'Roboto', sans-serif;
  background-color: #f0f2f5;
  color: #333;
  margin: 0;
  padding: 0;
}

.container {
  max-width: 900px;
  margin: 40px auto;
  padding: 25px;
  background: #ffffff;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  border-radius: 10px;
  overflow: hidden;
  transition: all 0.3s ease;
}

.container:hover {
  transform: translateY(-5px);
}

h1 {
  font-size: 2.8em;
  font-weight: 700;
  margin-bottom: 1em;
  color: #333;
  text-align: center;
  line-height: 1.2;
}

hr {
  border: 1px solid #ddd;
  margin: 2em 0;
}

a {
  color: #007bff;
  text-decoration: none;
  transition: color 0.3s ease, transform 0.3s ease;
}

a:hover {
  color: #0056b3;
  transform: scale(1.05);
}

.dir, .file {
  margin-bottom: 15px;
  text-align: center;
}

.dir a, .file a {
  display: inline-block;
  width: 100%;
  max-width: 250px;
  padding: 15px;
  border-radius: 8px;
  background-color: #e9ecef;
  transition: background-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out, transform 0.3s ease;
  font-weight: 500;
  text-transform: capitalize;
}

.dir a:hover, .file a:hover {
  background-color: #d4d9df;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
  transform: translateY(-3px);
}

.info {
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background: #f9fafb;
  margin-bottom: 2em;
  line-height: 1.8;
  font-size: 1.1em;
  text-align: left;
}

.footer {
  text-align: center;
  margin-top: 3em;
  font-size: 0.95em;
  color: #666;
  padding: 15px 0;
  background: #f8f9fa;
  border-top: 1px solid #ddd;
}

.button {
  display: inline-block;
  padding: 10px 20px;
  border: 2px solid #007bff;
  background-color: transparent;
  border-radius: 5px;
  color: #007bff;
  text-transform: uppercase;
  font-weight: bold;
  transition: all 0.3s ease;
  text-decoration: none;
}

.button:hover {
  background-color: #007bff;
  color: #ffffff;
}

@media (max-width: 768px) {
  h1 {
    font-size: 2.2em;
  }

  .container {
    padding: 20px;
  }

  a {
    font-size: 1em;
  }
  
  .dir a, .file a {
    width: auto;
    max-width: none;
  }
}
"""

# Update the HTML template to use the new container class
template = '''
<html>
    <head>
    <meta charset="utf-8">
    <title>{full_path} - AyameMC Maven Repo</title>
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <style>{css_styles}</style>
    </head>
    <body>
        <div class="container">
            <h1>{full_path} - AyameMC Maven Repo</h1>
            <hr>
            {info}
            <hr>
            <a href="../" class="button">../</a><br><br>
            {content}
            <hr>
            <div class="footer">Generated by AyameMC Maven Repo Generator</div>
        </div>
    </body>
</html>
'''


dir_template = '<div class="dir"><a href="{dir_name}/index.html">{dir_name} (dir)</a></div>'
file_template = '<div class="file"><a href="{file_name}">{file_name}</a></div>'

def generate_index_html(root_dir):
    for root, dirs, files in os.walk(root_dir):
        # Ignore hidden folders and files
        dirs[:] = [d for d in dirs if not d.startswith('.')]
        files = [f for f in files if not f.startswith('.')]

        content = ''
        full_path = os.path.relpath(root, root_dir)
        for dir_name in dirs:
            content += dir_template.format(dir_name=dir_name)
        for file_name in files:
            if file_name not in ['index.html', 'info.json', 'info.md']:
                content += file_template.format(file_name=file_name)

        # Generate info.json
        info = {"files": [], "dirs": []}

        for file_name in files:
            if file_name not in ['index.html', 'info.json', 'info.md']:
                file_path = os.path.join(root, file_name)
                with open(file_path, 'rb') as f:
                    file_content = f.read()
                    sha256_hash = hashlib.sha256(file_content).hexdigest()
                    info["files"].append({"name": file_name, "sha256": sha256_hash})

        for dir_name in dirs:
            info["dirs"].append({"name": dir_name})

        with open(os.path.join(root, 'info.json'), 'w') as info_file:
            json.dump(info, info_file, indent=4)

        # Process info.md to HTML
        info_md_path = os.path.join(root, 'info.md')
        info_placeholder = ''
        if os.path.exists(info_md_path):
            with open(info_md_path, 'r', encoding='utf-8') as md_file:
                info_md_content = md_file.read()
                # Capture markdown output in a string buffer
                output_buffer = StringIO()
                markdown.markdown(info_md_content, output_buffer)
                info_html_content = output_buffer.getvalue()
                info_placeholder = '<div class="info">{}</div>'.format(info_html_content)

        index_content = template.format(full_path=full_path, content=content, info=info_placeholder, css_styles=css_styles)
        with open(os.path.join(root, 'index.html'), 'w') as f:
            f.write(index_content)

generate_index_html('.')